.menu_restaurant{
    padding-bottom:60px;
    background-color:$light;
    &__wrapper{
        @include containerWidth;
    }
    &__group{
        margin-bottom:40px;
        display:block;
        &__title{
            margin-bottom:15px;
            font-size:16px;
            line-height:1;
            font-weight:300;
            text-transform:uppercase;
            &::after{
                content:"";
                display:block;
                width:40px;
                height:3px;
                background-color: $tertiaryColor;
                margin-top:10px;
            }
        }
    }
    &__box{
        background-color:#fff;
        @include boxShadow;
        border-radius:$radius;
        padding:15px 12px;
        margin-bottom: 20px;
        display: block;
        cursor:pointer;
        position: relative;
        overflow:hidden;
        &:last-child{
            margin-bottom:0;
        }
        &__content{
            width:100%;
            display: block;
            //conteneur qui change de largeur au survol de la box
            &__plate{
                display: block;
                width:100%;
                transition: $tspeedCheckbox width $tEaseCheckbox;
                font-size:18px;
                font-weight: 700;
                overflow:hidden; 
                white-space:nowrap; 
                text-overflow: ellipsis;
                margin-bottom:5px;
            }
            //conteneur qui change de largeur au survol de la box
            &__infos{
                width:100%;
                transition: $tspeedCheckbox width $tEaseCheckbox;
                display:flex;
                justify-content:space-between;
                &__desc{
                    display: block;
                    font-size:15px;
                    overflow:hidden; 
                    white-space:nowrap; 
                    text-overflow: ellipsis;
                }
                &__price{
                    display: block;
                    font-size:15px;
                    font-weight: 700;
                    padding-left:5px;
                }
            }
        }
        // On masque la checkbox
        &__check{
            display:none;
        }
        &__checked{
            height: 100%;
            width:60px;
            transform:scaleX(0);
            transform-origin: center right;
            background-color:$tertiaryColor;
            border-radius: 0 $radius $radius 0;
            right: 0;
            position: absolute;
            top: 0;
            display:flex;
            justify-content:center;
            align-items: center;
            transition: $tspeedCheckbox transform $tEaseCheckbox;
            i{
                color:#fff;
                font-size:25px;
                transform:rotate(-360deg);
                opacity:0;
                transition: 0.3s transform $tEaseCheckboxIcon, 0.15s opacity $tEaseCheckboxIcon;
                transition-delay: 0ms, 100ms;
            }
        }
        // Styles et animations au survol de la box
        &:hover{
            .menu_restaurant__box__content__plate{
                width:calc(100% - 65px);
                transition: $tspeedCheckbox width $tEaseCheckbox;
            }
            .menu_restaurant__box__content__infos{
                width:calc(100% - 65px);
                transition: $tspeedCheckbox width $tEaseCheckbox;
            }
            .menu_restaurant__box__checked{
                transform:scaleX(1);
                transition: $tspeedCheckbox transform $tEaseCheckbox;
                i {
                    transform:rotate(0deg);
                    opacity:1;
                    transition: 0.3s transform $tEaseCheckboxIcon, 0.15s opacity $tEaseCheckboxIcon;
                    transition-delay: 300ms, 200ms;
                }
            }
            
        }
        
    } 
}

// Vue tablette
@media only screen and (min-width: 768px) {
    .menu_restaurant{
        padding-top:60px;
        &__wrapper{
            @include containerWidthDesktop;
            @include displayFlexContainer;
            justify-content:center;
        }
        &__group{
            width:calc(50% - 15px);
            &:nth-child(1){
                margin-right:30px;
            }
        }
    }
}

// Vue desktop largeur 3 colonnes
@media only screen and (min-width: 1200px) {
    .menu_restaurant{
        padding-top:60px;
        &__wrapper{
            @include containerWidthDesktop;
            @include displayFlexContainer;
        }
        &__group{
            width:calc(33.33% - 20px);
            margin-left: 0;
            margin-right: 0;
            &:nth-child(1){
                margin-right:0px;
            }
        }
    }
}


// Animation des plats dans le menu
@keyframes showPlate {
    0% {
        opacity:0;
        transform:translateY(-10px);
    }
    100% {
        opacity:1;
        transform:translateY(0px);
    }
}
// Animation sur l'affichage des plats
// 1 - on donne une valeur au délai initial (celui qui va être incrémenter)
$delay : 0.5;
// 2 - on crée une double boucle qui va chercher chacun des plats de chacune des colonnes
@for $i from 1 through 3 { // = pour chacune des 3 colonnes (entrées + plats + desserts)
    @for $j from 1 through 4 { // = pour chacun des plats, de chacune des colonnes (parfois il y a 4 plats)
        .menu_restaurant__group__form .menu_restaurant__group:nth-child(#{$i}) .menu_restaurant__box:nth-child(#{$j}){
            animation:showPlate; /* appel keyframes */
            animation-duration: 0.35s; /* durée de l'animation */
            animation-timing-function: ease-out; /* type de easing */
            animation-iteration-count: 1; /* nombre de fois où l'animation est jouée */
            animation-fill-mode: both; /* "both" permet d'afficher l'animation depuis l'état 0% de la keyframe, jusqu'à l'état 100%, sans avoir besoin de préciserles propriétés CSS en dehors de la keyframe */
            animation-delay: #{$delay}s ; /* le delay est incréménter de O.2 pour chaque nouvel élément */
        }
        $delay : $delay + 0.2; // le délai est incrémenté de 0.2s à chaque itération de la boucle
    }
}